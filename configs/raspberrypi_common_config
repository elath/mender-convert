# Raspberry Pi does not support GRUB bootloader integration, fallback to U-boot.
MENDER_GRUB_EFI_INTEGRATION=n

# Nothing to copy
MENDER_COPY_BOOT_GAP=n

# 4MB alignment
MENDER_PARTITION_ALIGNMENT="4194304"

# compress the images to save some space
MENDER_COMPRESS_DISK_IMAGE="gzip"

# from the "bookworm" release onwards, the Raspberry Pi OS
# specific modifications expect the boot partition to be mounted
# at /boot/firmware
MENDER_BOOT_PART_MOUNTPOINT="/boot/firmware"

# the functions below are not exactly great, but should do the job well enough:
# extract one key from /etc/os-release of the image in question, and check it against
# the required value. The return values are meant to be used directly.

function check_image_os_id() {
    extracted_id=$(awk -F= '$1=="ID" { gsub(/"/, "", $2); print $2 ;}' work/rootfs/etc/os-release)
    if [ ${extracted_id} != ${RASPBERRYPI_OS_REQUIRED_ID} ]; then
        echo "expected ${RASPBERRYPI_OS_REQUIRED_ID}, but found ${extracted_id}"
        return 1
    fi
    return 0
}

function check_image_os_minimal_version() {
    extracted_version=$(awk -F= '$1=="VERSION_ID" { gsub(/"/, "", $2); print $2 ;}' work/rootfs/etc/os-release)
    if [ ${extracted_version} -lt ${RASPBERRYPI_OS_MINIMAL_VERSION} ]; then
        echo "expected ${RASPBERRYPI_OS_MINIMAL_VERSION}, but found ${extracted_version}"
        return 1
    fi
    return 0
}

# convenience wrapper
function check_image_os() {
    if ( ! check_image_os_id ) || ( ! check_image_os_minimal_version ); then
        return 1
    fi
    return 0
}

# this is required up to including Debian 11 "bullseye"
function fixup_boot_part_path_references() {
    # Raspberry Pi applications expect to find this on the device and in some
    # cases parse the options to determine the functionality. Create symlinks
    # to all files that don't already exist.
    for f in $(ls -1 work/boot); do
        if [ ! -f "work/rootfs/boot/${f}" ]; then
            run_and_log_cmd "sudo ln -fs /uboot/${f} work/rootfs/boot/${f}"
        fi
    done

    # Raspberry Pi headless configuration and other first boot scripts inspect the boot partition
    # for files. Modify the hard-coded mount point for the partition from /boot to /uboot.

    # Integrate with systemd services with "/boot/" hardcoded
    files_to_modify="$(find work/rootfs/lib/ -type f -name "*.service" -exec grep -l '/boot/' '{}' ';')"

    # MEN-5944: Integrate with raspberrypi-sys-mods/firstboot
    # See: https://github.com/RPi-Distro/raspberrypi-sys-mods
    if [ -f "work/rootfs/usr/lib/raspberrypi-sys-mods/firstboot" ]; then
        files_to_modify="$files_to_modify work/rootfs/usr/lib/raspberrypi-sys-mods/firstboot"
    fi

    # MEN-5954: Integrate with userconf-pi/userconf-service
    # See: https://github.com/RPi-Distro/userconf-pi
    if [ -f "work/rootfs/usr/lib/userconf-pi/userconf-service" ]; then
        files_to_modify="$files_to_modify work/rootfs/usr/lib/userconf-pi/userconf-service"
    fi

    # MEN-5955: Integrate with raspberrypi-net-mods/wpa_copy
    # See: https://github.com/RPi-Distro/raspberrypi-net-mods
    if [ -f "work/rootfs/usr/lib/raspberrypi-net-mods/wpa_copy" ]; then
        files_to_modify="$files_to_modify work/rootfs/usr/lib/raspberrypi-net-mods/wpa_copy"
    fi

    # Modify the files and log the changes
    for f in $files_to_modify; do
        run_and_log_cmd "sed -i.bak 's|/boot|/uboot|g' ${f}"
        log_debug "Modified file ${f}\n$(diff -u ${f}.bak ${f})"
        rm ${f}.bak
    done
    log_info "Certain service files have been changed to align with our /uboot boot partition mount point. See convert.log for more information"
}

function check_image_bitsize() {
    if [ "${RPI_NEEDS_32BIT:-}" == "y" ]; then
        if file -L work/rootfs/bin/sh | grep -qF "ELF 64-bit"; then
            echo "This configuration requires a 32-bit image for Raspberry Pi, usally named 'armhf'-variant."
            exit 1
        fi
    elif [ "${RPI_NEEDS_64BIT:-}" == "y" ]; then
        if file -L work/rootfs/bin/sh | grep -qF "ELF 32-bit"; then
            echo "This configuration requires a 64-bit image for Raspberry Pi, usally named 'arm64'-variant."
            exit 1
        fi
    else
        echo "Bitsize check not defined, please set either RPI_NEEDS_32BIT or RPI_NEEDS_64BIT"
        exit 1
    fi
}
